<?php

namespace App\Http\Controllers\API;

use App\Events\ChangeSeat;
use App\Events\SeatRelease;
use App\Events\SeatHold;
use App\Events\SeatStatusChange;
use App\Http\Controllers\Controller;
use App\Jobs\ReleaseSeatHoldJob;
use App\Jobs\BroadcastSeatStatusChange;
use App\Models\SeatShowtime;
use App\Models\Showtime;
use App\Models\SeatTemplate;
use App\Models\Room;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Auth;



class ChooseSeatController extends Controller
{
    public function show(string $slug)
    {
        // L·∫•y th√¥ng tin su·∫•t chi·∫øu
        $showtime = Showtime::with(['room.cinema', 'room', 'movieVersion', 'movie', 'seats'])
            ->where('slug', $slug)
            ->where('is_active', 1)
            ->first();

        // Ki·ªÉm tra n·∫øu kh√¥ng t√¨m th·∫•y su·∫•t chi·∫øu
        if (!$showtime) {
            return response()->json(['error' => 'Su·∫•t chi·∫øu kh√¥ng t·ªìn t·∫°i.'], 404);
        }

        // Ki·ªÉm tra quy·ªÅn v√† th·ªùi gian ƒë·∫∑t v√©
        if (Auth::user() && Auth::user()->role !== 'admin' && $showtime->start_time <= now()->addMinutes(10)) {
            return response()->json(['error' => 'ƒê√£ h·∫øt th·ªùi gian ƒë·∫∑t v√©.'], 403);
        }

        // L·∫•y ma tr·∫≠n gh·∫ø t·ª´ SeatTemplate
        $matrixSeat = SeatTemplate::getMatrixById($showtime->room->seatTemplate->matrix_id);

        // L·∫•y danh s√°ch gh·∫ø cho su·∫•t chi·∫øu
        $seats = $showtime->seats;

        // Kh·ªüi t·∫°o m·∫£ng seatMap 
        $seatMap = [];

        // Duy·ªát qua t·∫•t c·∫£ c√°c gh·∫ø v√† nh√≥m ch√∫ng theo h√†ng 
        foreach ($seats as $seat) {
            // Ki·ªÉm tra n·∫øu h√†ng ch∆∞a t·ªìn t·∫°i trong seatMap
            if (!isset($seatMap[$seat->coordinates_y])) {
                $seatMap[$seat->coordinates_y] = [
                    'row' => $seat->coordinates_y, 
                    'seats' => [] 
                ];
            }

            // Th√™m gh·∫ø v√†o danh s√°ch seats c·ªßa h√†ng
            $seatMap[$seat->coordinates_y]['seats'][] = [
                'id' => $seat->id,
                'room_id' => $seat->room_id,  
                'type_seat_id' => $seat->type_seat_id, 
                'coordinates_x' => $seat->coordinates_x,  
                'coordinates_y' => $seat->coordinates_y,  
                'name' => $seat->name,  
                'is_active' => $seat->is_active,  
                'created_at' => $seat->created_at,  
                'updated_at' => $seat->updated_at,  
                'pivot' => [
                    'showtime_id' => $seat->pivot->showtime_id,  
                    'seat_id' => $seat->pivot->seat_id,  
                    'status' => $seat->pivot->status,  
                    'price' => $seat->pivot->price, 
                    'user_id' => $seat->pivot->user_id,  
                    'created_at' => $seat->pivot->created_at,  
                    'updated_at' => $seat->pivot->updated_at,
                ]
            ];
        }

        // Chuy·ªÉn seatMap th√†nh m·∫£ng 
        $seatMap = array_values($seatMap);

        // Tr·∫£ v·ªÅ d·ªØ li·ªáu JSON v·ªõi th√¥ng tin su·∫•t chi·∫øu, ma tr·∫≠n gh·∫ø v√† seatMap
        return response()->json([
            'showtime' => $showtime,  
            'matrixSeat' => $matrixSeat, 
            'seatMap' => $seatMap,  
        ]);
    }

    public function saveInformation(Request $request, $showtimeId)
    {
        $seatIds = explode(',', $request->seatId);
        $userId = Auth::id();
        $slug = Showtime::where('id', $showtimeId)->where('is_active', '1')->pluck('slug')->first();

        if (!$slug) {
            return response()->json(['error' => 'Su·∫•t chi·∫øu kh√¥ng t·ªìn t·∫°i.'], 404);
        }

        $seatShowtimes = SeatShowtime::whereIn('seat_id', $seatIds)
            ->where('showtime_id', $showtimeId)
            ->get();

        foreach ($seatShowtimes as $seatShowtime) {
            if ($seatShowtime->hold_expires_at < now() || $seatShowtime->user_id != $userId || $seatShowtime->status != 'hold') {
                return response()->json(['error' => 'Gh·∫ø ƒë√£ c√≥ ng∆∞·ªùi kh√°c gi·ªØ ho·∫∑c gh·∫ø ƒë√£ b√°n.'], 409);
            }
        }

        session()->put("checkout_data.$showtimeId", [
            'showtime_id' => $showtimeId,
            'seat_ids' => $seatIds,
            'selected_seats_name' => $request->selected_seats_name,
            'total_price' => $request->total_price,
            'remainingSeconds' => $request->remainingSeconds,
        ]);

        return response()->json(['message' => 'Th√¥ng tin gi·ªØ gh·∫ø ƒë√£ ƒë∆∞·ª£c l∆∞u.']);
    }

    // ko c√≥ sk
    // public function updateSeat(Request $request)
    // {
    //     try {
    //         $seatId = $request->seat_id;
    //         $showtimeId = $request->showtime_id;
    //         $action = $request->action;
    //         $userId = Auth::id();

    //         Log::info("üî¥ Broadcasting seat event", [
    //             'seat_id' => $seatId,
    //             'showtime_id' => $showtimeId,
    //             'status' => $action
    //         ]);
    //         broadcast(new SeatStatusChange($seatId, $showtimeId, $action))->toOthers();

    //         // L·∫•y th√¥ng tin gh·∫ø + ki·ªÉm tra is_active
    //         $seatShowtime = SeatShowtime::join('seats', 'seats.id', '=', 'seat_showtimes.seat_id')
    //             ->where('seat_showtimes.seat_id', $seatId)
    //             ->where('seat_showtimes.showtime_id', $showtimeId)
    //             ->where('seats.is_active', true) // Ch·ªâ l·∫•y gh·∫ø ƒëang ho·∫°t ƒë·ªông
    //             ->select('seat_showtimes.*') // Ch·ªâ l·∫•y d·ªØ li·ªáu t·ª´ b·∫£ng seat_showtimes
    //             ->lockForUpdate()
    //             ->first();

    //         // Ki·ªÉm tra n·∫øu gh·∫ø kh√¥ng t·ªìn t·∫°i ho·∫∑c b·ªã v√¥ hi·ªáu h√≥a
    //         if (!$seatShowtime) {
    //             return response()->json(['error' => 'Gh·∫ø kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã v√¥ hi·ªáu h√≥a.'], 404);
    //         }

    //         // üöÄ **TH√äM KI·ªÇM TRA: N·∫øu gh·∫ø ƒë√£ b·ªã gi·ªØ b·ªüi ng∆∞·ªùi kh√°c, t·ª´ ch·ªëi request**
    //         if (
    //             $action === 'hold' &&
    //             $seatShowtime->status === 'hold' &&
    //             $seatShowtime->user_id !== null &&
    //             $seatShowtime->user_id != $userId
    //         ) {
    //             return response()->json([
    //                 'error' => 'Gh·∫ø n√†y ƒë√£ c√≥ ng∆∞·ªùi kh√°c gi·ªØ. Vui l√≤ng ch·ªçn gh·∫ø kh√°c.',
    //             ], 409);
    //         }

    //         DB::transaction(function () use ($seatShowtime, $seatId, $showtimeId, $userId, $action) {
    //             Log::info("Before update:", $seatShowtime->toArray());

    //             if ($action === 'hold' && $seatShowtime->status === 'available') {
    //                 $seatShowtime->update([
    //                     'status' => 'hold',
    //                     'user_id' => $userId, // ‚úÖ Gi·ªØ user_id khi gi·ªØ gh·∫ø
    //                     'hold_expires_at' => now()->addMinutes(10),
    //                 ]);

    //                 Log::info("After update:", $seatShowtime->fresh()->toArray());

    //                 event(new SeatHold($seatId, $showtimeId));
    //                 ReleaseSeatHoldJob::dispatch([$seatId], $showtimeId, null)->delay(now()->addMinutes(10));
    //             } elseif ($action === 'release' && $seatShowtime->status === 'hold' && $seatShowtime->user_id === $userId) {
    //                 $seatShowtime->update([
    //                     'status' => 'available',
    //                     'user_id' => null,
    //                     'hold_expires_at' => null,
    //                 ]);

    //                 event(new SeatRelease($seatId, $showtimeId));
    //             }
    //         });

    //         $updatedSeat = SeatShowtime::where('seat_id', $seatId)->where('showtime_id', $showtimeId)->first();

    //         return response()->json([
    //             'message' => 'C·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø th√†nh c√¥ng.',
    //             'seat' => $updatedSeat
    //         ]);
    //     } catch (\Exception $e) {
    //         Log::error("L·ªói c·∫≠p nh·∫≠t gh·∫ø: " . $e->getMessage());
    //         return response()->json(['error' => 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø.'], 500);
    //     }
    // }

    //th√™m sk front end
    // public function updateSeat(Request $request)
    // {
    //     try {
    //         $seatId = $request->seat_id;
    //         $showtimeId = $request->showtime_id;
    //         $action = $request->action;
    //         $userId = Auth::id();

    //         //  Ph√°t s·ª± ki·ªán ƒë·ªÉ frontend nh·∫≠n realtime
    //         broadcast(new SeatStatusChange($seatId, $showtimeId, $action))->toOthers();

    //         // Ki·ªÉm tra n·∫øu gh·∫ø ƒë√£ b·ªã gi·ªØ b·ªüi ng∆∞·ªùi kh√°c
    //         $seatShowtime = SeatShowtime::join('seats', 'seats.id', '=', 'seat_showtimes.seat_id')
    //             ->where('seat_showtimes.seat_id', $seatId)
    //             ->where('seat_showtimes.showtime_id', $showtimeId)
    //             ->where('seats.is_active', true)
    //             ->select('seat_showtimes.*')
    //             ->lockForUpdate()
    //             ->first();

    //         if (!$seatShowtime) {
    //             return response()->json(['error' => 'Gh·∫ø kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã v√¥ hi·ªáu h√≥a.'], 404);
    //         }

    //         if ($action === 'hold' && $seatShowtime->status === 'hold' && $seatShowtime->user_id !== $userId) {
    //             return response()->json([
    //                 'error' => 'Gh·∫ø n√†y ƒë√£ c√≥ ng∆∞·ªùi kh√°c gi·ªØ. Vui l√≤ng ch·ªçn gh·∫ø kh√°c.',
    //             ], 409);
    //         }

    //         DB::transaction(function () use ($seatShowtime, $seatId, $showtimeId, $userId, $action) {
    //             if ($action === 'hold' && $seatShowtime->status === 'available') {
    //                 $seatShowtime->update([
    //                     'status' => 'hold',
    //                     'user_id' => $userId,
    //                     'hold_expires_at' => now()->addMinutes(10),
    //                 ]);
    //                 //  G·ª≠i s·ª± ki·ªán Pusher ƒë·ªÉ frontend c·∫≠p nh·∫≠t UI
    //                 broadcast(new SeatStatusChange($seatId, $showtimeId, 'hold'))->toOthers();
    //             } elseif ($action === 'release' && $seatShowtime->status === 'hold' && $seatShowtime->user_id === $userId) {
    //                 $seatShowtime->update([
    //                     'status' => 'available',
    //                     'user_id' => null,
    //                     'hold_expires_at' => null,
    //                 ]);
    //                 //  G·ª≠i s·ª± ki·ªán khi gh·∫ø ƒë∆∞·ª£c th·∫£ ra
    //                 broadcast(new SeatStatusChange($seatId, $showtimeId, 'available'))->toOthers();
    //             }
    //         });

    //         $updatedSeat = SeatShowtime::where('seat_id', $seatId)->where('showtime_id', $showtimeId)->first();

    //         return response()->json([
    //             'message' => 'C·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø th√†nh c√¥ng.',
    //             'seat' => $updatedSeat
    //         ]);
    //     } catch (\Exception $e) {
    //         Log::error("L·ªói c·∫≠p nh·∫≠t gh·∫ø: " . $e->getMessage());
    //         return response()->json(['error' => 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø.'], 500);
    //     }
    // }

    //c√≥ session


    public function updateSeat(Request $request)
    {
        try {
            $seatId = $request->seat_id;
            $showtimeId = $request->showtime_id;
            $action = $request->action;
            $userId = auth()->id();
    
            if (!$userId) {
                return response()->json(['error' => 'Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng.'], 400);
            }
            $newStatus = ($action === 'hold') ? 'hold' : 'available';

           
            $seatShowtime = SeatShowtime::join('seats', 'seats.id', '=', 'seat_showtimes.seat_id')
            ->where('seat_showtimes.seat_id', $seatId)
            ->where('seat_showtimes.showtime_id', $showtimeId)
            ->where('seats.is_active', 1)
            ->select('seat_showtimes.*') 
            ->lockForUpdate()
            ->first();
    
        if (!$seatShowtime) {
            return response()->json(['error' => 'Gh·∫ø kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã v√¥ hi·ªáu h√≥a.'], 404);
        }
    
        if ($action === 'hold' && $seatShowtime->status === 'hold' && $seatShowtime->user_id !== $userId) {
            return response()->json([
                'error' => 'Gh·∫ø n√†y ƒë√£ c√≥ ng∆∞·ªùi kh√°c gi·ªØ. Vui l√≤ng ch·ªçn gh·∫ø kh√°c.',
                'seat_status' => $seatShowtime->status,
                'hold_expires_at' => $seatShowtime->hold_expires_at
            ], 409);
        }
    
        $holdExpiresAt = ($action === 'hold') ? now()->addMinutes(10) : null;

        DB::transaction(function () use ($seatShowtime, $seatId, $showtimeId, $userId, $action, $holdExpiresAt) {
            if ($action === 'hold' && $seatShowtime->status === 'available') {
                DB::table('seat_showtimes')
                    ->where('seat_id', $seatId)
                    ->where('showtime_id', $showtimeId)
                    ->update([
                        'status' => 'hold',
                        'user_id' => $userId,
                        'hold_expires_at' => $holdExpiresAt,
                    ]);
                    dispatch(new BroadcastSeatStatusChange($seatId, $showtimeId,"hold", $userId));
            } elseif ($action === 'release' && $seatShowtime->status === 'hold' && $seatShowtime->user_id === $userId) {
                DB::table('seat_showtimes')
                    ->where('seat_id', $seatId)
                    ->where('showtime_id', $showtimeId)
                    ->update([
                        'status' => 'available',
                        'user_id' => null,
                        'hold_expires_at' => null,
                    ]);
                    dispatch(new BroadcastSeatStatusChange($seatId, $showtimeId,"available", $userId));
            }
        });
    
        $updatedSeat = SeatShowtime::where('seat_id', $seatId)
            ->where('showtime_id', $showtimeId)
            ->first();

            return response()->json([
                'message' => 'C·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø th√†nh c√¥ng.',
                'seat' => $updatedSeat
            ], 200);
        } catch (\Exception $e) {
            return response()->json([
                'error' => 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø.',
                'details' => $e->getMessage()
            ], 500);
        }
    }
    
    

    public function getUserHoldSeats(string $slug)
    {
        // L·∫•y th√¥ng tin user
        $userId = Auth::id();
    
        if (!$userId) {
            return response()->json(['error' => 'Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng.'], 401);
        }
    
        // L·∫•y su·∫•t chi·∫øu theo slug
        $showtime = Showtime::where('slug', $slug)
            ->where('is_active', 1)
            ->with(['movie', 'room.cinema']) // L·∫•y c·∫£ movie v√† cinema
            ->first();
    
        if (!$showtime) {
            return response()->json(['error' => 'Su·∫•t chi·∫øu kh√¥ng t·ªìn t·∫°i.'], 404);
        }
    
        // L·∫•y danh s√°ch gh·∫ø ƒëang ƒë∆∞·ª£c gi·ªØ k√®m theo to√†n b·ªô th√¥ng tin c·ªßa gh·∫ø
        $holdSeats = SeatShowtime::where('showtime_id', $showtime->id)
            ->where('user_id', $userId)
            ->where('status', 'hold')
            ->with('seat') // Load ƒë·∫ßy ƒë·ªß th√¥ng tin c·ªßa gh·∫ø
            ->get();
    
        return response()->json([
            'showtime' => $showtime,
            'holdSeats' => $holdSeats
        ]);
    }
}    
